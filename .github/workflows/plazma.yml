name: Scheduled Upstream (Plazma/1.19.4)

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "*/20 * * * *"

env:
  OS: ubuntu-latest

  MAIN: Plazma
  MAIN_REPO: PlazmaMC/Plazma
  MAIN_BRANCH: ver/1.19.4

  GIT_EMAIL: dev@alpha93.kr
  GIT_NAME: AlphaKR93

  JDK: 19.0.2+7
  JDK_DIST: temurin

  PAPER_REPO: PaperMC/Paper
  PAPER_BRANCH: master

  PURPUR_REPO: PurpurMC/Purpur
  PURPUR_BRANCH: ver/1.19.3

  PUFFERFISH_REPO: pufferfish-gg/Pufferfish
  PUFFERFISH_BRANCH: ver/1.19

jobs:

  setup:
    name: Initialize Actions
    if: "!startsWith(github.event.commits[0].message, '[CI-Skip]')"
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.setup.outputs.runner }}
    steps:
      - name: Initialize Variables
        id: setup
        run: |
          echo "runner=${{ env.OS }}" >> $GITHUB_OUTPUT

  check-upstreams:
    name: Check Upstreams
    steps:

      - name: Initialize Variables
        id: init
        run: |
          echo "runner=${{ env.OS }}" >> $GITHUB_OUTPUT

      - name: Checkout ${{ env.MAIN }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.MAIN_REPO }}
          path: ${{ env.MAIN }}
          ref: ${{ env.MAIN_BRANCH }}
          token: ${{ secrets.GH_PAT }}

      - name: Check Paper Commit
        id: paper
        run: |
          response=$(curl --silent https://api.github.com/repos/${{ env.PAPER_REPO }}/commits?sha=${{ env.PAPER_BRANCH }})
          echo $response
          latest=$(echo $response | jq -r ".[0].sha")
          current=$(cat ${{ env.MAIN }}/gradle.properties | grep paperCommit | sed 's/paperCommit = //')
          echo "Current: $current, Latest: $latest"
          printf "\nResponse:\n"

          if [ "$latest" != "$current" ]; then
            echo "latest=$latest" >> $GITHUB_OUTPUT
            echo "current=$current" >> $GITHUB_OUTPUT
            echo "Need Upstream"
          fi

      - name: Check Pufferfish Commit
        if: env.EDITED_PUFFERFISH != 'true'
        id: pufferfish
        run: |
          response=$(curl --silent https://api.github.com/repos/${{ env.PUFFERFISH_REPO }}/commits?sha=${{ env.PUFFERFISH_BRANCH }})
          echo $response
          latest=$(echo $response | jq -r ".[0].sha")
          current=$(cat ${{ env.MAIN }}/.upstream-data | grep pufferfishCommit | sed 's/pufferfishCommit = //')
          echo "Current: $current, Latest: $latest"
          printf "\nResponse:\n"

          if [ "$latest" != "$current" ]; then
            echo "latest=$latest" >> $GITHUB_OUTPUT
            echo "current=$current" >> $GITHUB_OUTPUT
            echo "Need Upstream"
          fi

      - name: Check Purpur Commit
        id: purpur
        run: |
          response=$(curl --silent https://api.github.com/repos/${{ env.PURPUR_REPO }}/commits?sha=${{ env.PURPUR_BRANCH }})
          echo $response
          latest=$(echo $response | jq -r ".[0].sha")
          current=$(cat ${{ env.MAIN }}/.upstream-data | grep purpurCommit | sed 's/purpurCommit = //')
          echo "Current: $current, Latest: $latest"
          printf "\nResponse:\n"

          if [ "$latest" != "$current" ]; then
            echo "latest=$latest" >> $GITHUB_OUTPUT
            echo "current=$current" >> $GITHUB_OUTPUT
            echo "Need Upstream"
          fi

    needs: setup
    runs-on: ${{ needs.setup.outputs.runner }}
    outputs:
      runner: ${{ steps.init.outputs.runner }}

      paper: ${{ steps.paper.outputs.latest }}
      purpur: ${{ steps.purpur.outputs.latest }}

      paper_current: ${{ steps.paper.outputs.current }}
      purpur_current: ${{ steps.purpur.outputs.current }}
  
  upstream-paper:
    name: Upstream Paper
    steps:

      - name: Checkout ${{ env.MAIN }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.MAIN_REPO }}
          path: ${{ env.MAIN }}
          ref: ${{ env.MAIN_BRANCH }}
          token: ${{ secrets.GH_PAT }}
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JDK_DIST }}
          java-version: ${{ env.JDK }}
          check-latest: true
          cache: 'gradle'

      - name: Configure Git
        run: git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com" && git config --global user.name "github-actions[bot]"

      - name: Update Upstream
        run: |
          cd ${{ env.MAIN }}
          sed -i 's/paperCommit = .*/paperCommit = '"${{ needs.check-upstreams.outputs.paper }}"'/' gradle.properties
          cat gradle.properties | grep paperCommit
          ./gradlew applyPatches --stacktrace
      
      - name: Rebuild ${{ env.MAIN }}
        run: | 
          cd ${{ env.MAIN }}
          ./gradlew rebuildPatches

      - name: Commit Changes
        run: |
          cd ${{ env.MAIN }}

          response=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.PAPER_REPO }}/compare/${{ needs.check-upstreams.outputs.paper_current }}...${{ needs.check-upstreams.outputs.paper }})
          echo $response
          desc=$(echo $response | jq -r '.commits[] | "${{ env.PAPER_REPO }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')

          git add .
          printf "Updated Upstream (Paper)\n\nUpstream has released updates that appear to apply and compile correctly\n\nPaper Changes:\n$desc" | git commit -F -
          git fetch
          git pull origin ${{ env.MAIN_BRANCH }}
          git push origin ${{ env.MAIN_BRANCH }}

    needs: [check-upstreams]
    runs-on: ${{ needs.check-upstreams.outputs.runner }}
    if: needs.check-upstreams.outputs.paper != '' && needs.check-upstreams.outputs.purpur == ''
  
  upstream-purpur:
    name: Upstream Purpur
    steps:

      - name: Checkout ${{ env.MAIN }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.MAIN_REPO }}
          path: ${{ env.MAIN }}
          ref: ${{ env.MAIN_BRANCH }}
          token: ${{ secrets.GH_PAT }}

      - name: Checkout Pufferfish
        uses: actions/checkout@v3
        with:
          repository: ${{ env.PUFFERFISH_REPO }}
          path: Pufferfish
          ref: ${{ env.PUFFERFISH_BRANCH }}

      - name: Checkout Purpur
        uses: actions/checkout@v3
        with:
          repository: ${{ env.PURPUR_REPO }}
          path: Purpur
          ref: ${{ env.PURPUR_BRANCH }}
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JDK_DIST }}
          java-version: ${{ env.JDK }}
          check-latest: true
          cache: 'gradle'

      - name: Configure Git
        run: git config --global user.email ${{ env.GIT_EMAIL }} && git config --global user.name ${{ env.GIT_NAME }}

      - name: Initial Sources
        id: init
        run: |
          sha=$(curl --silent https://api.github.com/repos/${{ env.PAPER_REPO }}/commits?sha=${{ env.PAPER_BRANCH }} | jq -r ".[0].sha") && echo "paper=$sha" >> $GITHUB_OUTPUT
          cd Pufferfish/
          pufferfish=$(git log -1 --pretty=oneline | cut -c 1-40) && echo "pufferfish=$pufferfish" >> $GITHUB_OUTPUT
          sed -i 's/paperRef=.*/paperRef='"$sha"'/' gradle.properties
          rm -rf patches/server/* patches/api/*
          cp -rf ../Purpur/patches/api/*-Pufferfish-API-Changes.patch patches/api/0001-Pufferfish-API-Changes.patch
          cp -rf ../Purpur/patches/server/*-Pufferfish-Server-Changes.patch patches/server/0001-Pufferfish-Server-Changes.patch
          ./gradlew applyPatches --stacktrace

      - name: Copy Sources
        run: |
          sed -i 's/pufferfishCommit = .*/pufferfishCommit = '"${{ steps.init.outputs.pufferfish }}"'/' ${{ env.MAIN }}/.upstream-data
          cd Pufferfish/.gradle/caches/paperweight/upstreams/paper/Paper-Server
          cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
          git add .
          git commit -m "Sources"
      
      - name: Pufferfish Server Changes
        run: |
          cd Pufferfish/pufferfish-server/
          rm -rf .git
          cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
          mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-Server/.git ./
          git add .
          printf "Pufferfish Server Changes\n\nOriginal: Kevin Raneri <kevin.raneri@gmail.com>\nCopyright (C) 2023 Pufferfish Studios LLC\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>." | git commit -F -

      - name: Pufferfish API Changes
        run: |
          cd Pufferfish/pufferfish-api
          rm -rf .git
          mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-API/.git ./
          git add .
          printf "Pufferfish API Changes\n\nOriginal: Kevin Raneri <kevin.raneri@gmail.com>\nCopyright (C) 2023 Pufferfish Studios LLC\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>." | git commit -F -

      - name: Build Pufferfish Patches
        run: |
          cd Pufferfish/
          ./gradlew rebuildPatches

      - name: Initial Purpur Sources
        id: init_purpur
        run: |
          cd Purpur/
          purpur=$(git log -1 --pretty=oneline | cut -c 1-40) && echo "purpur=$purpur" >> $GITHUB_OUTPUT
          sed -i 's/paperCommit = .*/paperCommit = '"${{ steps.init.outputs.paper }}"'/' gradle.properties
          ./gradlew applyPatches
      
      - name: Upload Purpur Patches
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: purpur-patches
          path: purpur/patches

      - name: Purpur Server Changes
        run: |
          sed -i 's/purpurCommit = .*/purpurCommit = '"${{ steps.init_purpur.outputs.purpur }}"'/' ${{ env.MAIN }}/.upstream-data
          cd Purpur/Purpur-Server/
          rm -rf .git
          cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
          mv -f ../../Pufferfish/pufferfish-server/.git ./
          git add .
          printf "Purpur Server Changes\n\nOriginal: PurpurMC\nCopyright (C) 2023 PurpurMC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE." | git commit -F -

      - name: Purpur API Changes
        run: |
          cd Purpur/Purpur-API/
          rm -rf .git
          mv -f ../../Pufferfish/pufferfish-api/.git ./
          git add .
          printf "Purpur API Changes\n\nOriginal: PurpurMC\nCopyright (C) 2023 PurpurMC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE." | git commit -F -

      - name: Build Patches
        run: |
          cd Purpur/
          ./gradlew rebuildPatches
          cp -rf patches/api/*-Pufferfish-API-Changes.patch ../${{ env.MAIN }}/patches/api/0001-Pufferfish-API-Changes.patch
          cp -rf patches/server/*-Pufferfish-Server-Changes.patch ../${{ env.MAIN }}/patches/server/0001-Pufferfish-Server-Changes.patch
          cp -rf patches/api/*-Purpur-API-Changes.patch ../${{ env.MAIN }}/patches/api/0002-Purpur-API-Changes.patch
          cp -rf patches/server/*-Purpur-Server-Changes.patch ../${{ env.MAIN }}/patches/server/0002-Purpur-Server-Changes.patch

      - name: Rebuild Patches
        run: |
          cd ${{ env.MAIN }}/
          if [ "${{ needs.check-upstreams.outputs.paper }}" != '' ]; then
            sed -i 's/paperCommit = .*/paperCommit = '"${{ needs.check-upstreams.outputs.paper }}"'/' gradle.properties
          fi
          cat gradle.properties | grep paperCommit
          ./gradlew applyPatches --stacktrace
          ./gradlew rebuildPatches

      - name: Commit changes
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com" && git config --global user.name "github-actions[bot]"

          cd ${{ env.MAIN }}/

          if [ "${{ needs.check-upstreams.outputs.paper }}" != '' ]; then
            upstream="Paper"
            response=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.PAPER_REPO }}/compare/${{ needs.check-upstreams.outputs.paper_current }}...${{ needs.check-upstreams.outputs.paper }})
            printf "\nPaper Changes:\n"
            echo $response
            desc=$(echo $response | jq -r '.commits[] | "${{ env.PAPER_REPO }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
            commit="$commit\n\nPaper Changes:\n$desc"
          fi
          
          if [ "${{ needs.check-upstreams.outputs.pufferfish }}" != '' ]; then
            if [ "$upstream" != "" ]; then upstream="$upstream & Pufferfish"; else upstream="Pufferfish"; fi
            response=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.PUFFERFISH_REPO }}/compare/${{ needs.check-upstreams.outputs.pufferfish_current }}...${{ steps.init.outputs.pufferfish }})
            printf "\nPufferfish Changes:\n"
            echo $response
            desc=$(echo $response | jq -r '.commits[] | "${{ env.PUFFERFISH_REPO }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
            commit="$commit\n\nPufferfish Changes:\n$desc"
          fi

          if [ "$upstream" != "" ]; then upstream="$upstream & Purpur"; else upstream="Purpur"; fi
          response=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.PURPUR_REPO }}/compare/${{ needs.check-upstreams.outputs.purpur_current }}...${{ steps.init_purpur.outputs.purpur }})
          printf "\nPurpur Changes:\n"
          echo $response
          desc=$(echo $response | jq -r '.commits[] | "${{ env.PURPUR_REPO }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
          commit="$commit\n\nPurpur Changes:\n$desc"

          git add .
          printf "Updated Upstream ($upstream)\n\nUpstream has released updates that appear to apply and compile correctly$commit" | git commit -F -
          git fetch
          git pull origin ${{ env.MAIN_BRANCH }}
          git push origin ${{ env.MAIN_BRANCH }}
      
      - name: Upload ${{ env.MAIN }} Patches
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MAIN }}-patches
          path: ${{ env.MAIN }}/patches

    needs: [check-upstreams]
    runs-on: ${{ needs.check-upstreams.outputs.runner }}
    if: needs.check-upstreams.outputs.purpur != ''
